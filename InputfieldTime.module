<?php

/**
 * An Inputfield for handling time inputs.
 */

class InputfieldTime extends Inputfield
{
    public static function getModuleInfo()
    {
		return array(
			'title'     => __('Inputfield Time', __FILE__),
            'summary'   => __('Allows entry of times in various formats', __FILE__),
			'version'   => 1,
            'permanent' => false,
            'autoload'  => false,
            'singular'  => false,
            'requires'  => array('FieldtypeTime'),
            'installs'  => array('FieldtypeTime'),
            'author'    => 'S. Dickinson, QBox.co',
			);
	}


    public function init()
    {
		$this->attr('type', 'text');
		$this->attr('size', 10);
		$this->attr('maxlength', 10);
		$this->attr('placeholder', '');
		$this->attr('pattern', '');
		$this->set('format', 'HHMMSS-24');
		$this->set('useColons', true);
	    parent::init();
    }



    public function ___render()
    {
		$out = "\n<input " . $this->getAttributesString() . " />";
		return $out;
	}



    public function getAttributes()
    {
		$attrs = parent::getAttributes();

        if (empty($attrs['size'])) {
			unset($attrs['size']);
			$attrs['class'] = (empty($attrs['class']) ? '' : $attrs['class'] . ' ') . 'InputfieldMaxWidth';
		}


        //$attrs['value'] = $this->fromDBTimeString($attrs['value']);

		return $attrs;
	}



    public function setAttribute($key, $value)
    {
        if ($key == 'value') {
            $value = $this->sanitizeValue($value);
        }

		return parent::setAttribute($key, $value);
	}



    /**
     * Converts from DB time string format to Inputfield format
     */
    /* protected function fromDBTimeString($dbstring) */
    /* { */
    /*     $regex = "#^(?P<sign>-?)(?P<hours>[0-9]{1,3}):(?P<mins>[0-9]{2}):(?P<secs>[0-9]{2})#"; */
    /*     $time = array( */
    /*         'sign'  => '', */
    /*         'hours' => '00', */
    /*         'mins'  => '00', */
    /*         'secs'  => '00', */
    /*     ); */
    /*     $m = array(); */
    /*     $result = '00'; */

    /*     preg_match($regex, $dbstring, $m); */
    /*     $time = array_merge($time, $m); */

    /*     $format   = $this->format; */

    /*     switch ($format) { */
    /*     case 'HHMM-24': */
    /*         $result = $time['hours'] . ':' . $time['mins']; */
    /*         break; */
    /*     } */

    /*     // TODO handle negatives! */
    /*     // TODO handle colons! */
    /*     return $result; */
    /* } */


    /**
     * Converts the given $value in the input's format and converts it into a string in DB
     * (-)HHH:MM:SS format.
     */
    /* protected function toDBTimeString($value) */
    /* { */
    /*     $format   = $this->format; */
    /*     $regex    = ''; */

    /*     $time = array( */
    /*         'sign'  => '', */
    /*         'hours' => '00', */
    /*         'mins'  => '00', */
    /*         'secs'  => '00', */
    /*     ); */

    /*     $neg = '-' === substr($format, -1); */
    /*     if ($neg) { */
    /*         $format = substr($format, 0, -1); */
    /*     } */

    /*     switch ($format) { */
    /*     case 'SS': */
    /*         $regex  = '(?P<secs>[0-5]?[0-9])'; */
    /*         $err    = $this->_("Format must be 1 or 2 digit seconds (0-59)."); */
    /*         break; */

    /*     case 'MM': */
    /*         $regex  = '(?P<mins>[0-5]?[0-9])'; */
    /*         $err    = $this->_("Format must be 1 or 2 digit minutes (0-59)."); */
    /*         break; */

    /*     case 'MMSS': */
    /*         $regex  = '(?P<mins>[0-5][0-9]):?(?P<secs>[0-5][0-9])'; */
    /*         $err    = $this->_("Format must be 1 or 2 digit minutes (00-59) then seconds (00-59)."); */
    /*         $err .= $this->_(" Colons may separate parts."); */
    /*         break; */

    /*     case 'HH-24': */
    /*         $regex = "(?P<hours>0?[0-9]|1[0-9]|2[0-3])"; */
    /*         $err   = $this->_("Format must be 1 or 2 digit hours (0-24)."); */
    /*         break; */

    /*     case 'HHMM-24': */
    /*         $regex  = "(?P<hours>0?[0-9]|1[0-9]|2[0-3]):?(?P<mins>[0-5][0-9])"; */
    /*         $err    = $this->_("Format must be 1 or 2 digit hour (0-24) then minutes (00-59)."); */
    /*         $err .= $this->_(" Colons may separate parts."); */
    /*         break; */

    /*     case 'HHMMSS-24': */
    /*         $regex  = "(?P<hours>0?[0-9]|1[0-9]|2[0-3]):?(?P<mins>[0-5][0-9]):?(?P<secs>[0-5][0-9])"; */
    /*         $err    = $this->_("Format must be 1 or 2 digit hour (0-24) then minutes (00-59) the seconds (00-59)."); */
    /*         $err .= $this->_(" Colons may separate parts."); */
    /*         break; */

    /*     case 'HHH': */
    /*         $regex = "(?P<hours>[0-9]{1,3})"; */
    /*         $err   = $this->_("Format must be 1-3 digit hours (0-800)."); */
    /*         break; */

    /*         /1* 'HHHMM'      => $this->_("Hours (0-800) & minutes (00-59)."), *1/ */
    /*         /1* 'HHHMMSS'    => $this->_("Hours (0-800), minutes (00-59) & seconds (00-59)."), *1/ */

    /*     default: */
    /*         break; */
    /*     } */

    /*     if ('' === $regex) { */
    /*         return $value; */
    /*     } */

    /*     if ($neg) { */
    /*         $err .= $this->_(" An optional leading negative is allowed."); */
    /*         $regex = '(?P<sign>-?)' . $regex; */
    /*     } */


    /*     $regex = "#^$regex$#"; */
    /*     $m = array(); */
    /*     if (preg_match($regex, $value, $m)) { */
    /*         if (1 === strlen($m['hours'])) { */
    /*             $m['hours'] = "0".$m['hours']; */
    /*         } */
    /*         $time = array_merge($time, $m); */
    /*     } else { */
    /*         $this->error($err); */
    /*     } */

    /*     return $time['sign'] . $time['hours'] . ':' . $time['mins'] . ':' . $time['secs']; */
    /* } */


    /* protected function checkFormat($value) */
    /* { */
    /*     $format   = $this->format; */
    /*     $colons   = $this->useColons; */
    /*     $regex    = ''; */

    /*     $neg = '-' === substr($format, -1); */
    /*     if ($neg) { */
    /*         $format = substr($format, 0, -1); */
    /*     } */

    /*     switch ($format) { */
    /*     case 'SS': */
    /*     case 'MM': */
    /*         $regex  = '[0-5]?[0-9]'; */
    /*         $err    = $this->_("Format must be one or two digits in the range '0-59'."); */
    /*         break; */

    /*     case 'HHMM-24': */
    /*         $colon  = $colons ? ':?' : ''; */
    /*         $regex  = "(?P<hours>0?[0-9]|1[[0-9]|2[0-3])$colon(?P<mins>[0-5][0-9])"; */
    /*         $err    = $this->_("Format must be 1 or 2 digit hour (0-24) then minutes (00-59)."); */
    /*         if ($colon) { */
    /*             $err .= $this->_(" Colons may separate parts."); */
    /*         } */
    /*         break; */

    /*     case 'HHMMSS-24': */
    /*         $colon  = $colons ? ':?' : ''; */
    /*         $regex  = "(?P<hours>0?[0-9]|1[[0-9]|2[0-3])$colon(?P<mins>[0-5][0-9])$colon(?P<secs>[0-5][0-9])"; */
    /*         $err    = $this->_("Format must be 1 or 2 digit hour (0-24) then minutes (00-59) the seconds (00-59)."); */
    /*         if ($colon) { */
    /*             $err .= $this->_(" Colons may separate parts."); */
    /*         } */
    /*         break; */

    /*     default: */
    /*         break; */
    /*     } */

    /*     if ('' === $regex) { */
    /*         return; */
    /*     } */

    /*     if ($neg) { */
    /*         $err .= $this->_(" An optional leading negative is allowed."); */
    /*         $regex = '-?' . $regex; */
    /*     } */

    /*     $regex = "#^$regex$#"; */
    /*     if (!preg_match($regex, $value)) { */
    /*         $this->error($err); */
    /*     } */
    /* } */

    protected function sanitizeValue($value)
    {
        $value    = trim($value);
        $format   = $this->format;
        $colons   = $this->useColons;

        if (!strlen("$value")) {
            $value = '00:00:00';
        }

        $negative = substr($value, 0, 1) === '-';
        if($negative) {
            $value = substr($value, 1);
        }

        $neg_ok = '-' === substr($format, -1);
        if (!$neg_ok) {
            $negative = false;
        } else {
            $format = substr($format, 0, -1);
        }

        $value = str_replace('-', ':', $value);
        $value = preg_replace('/[^\d:]/', '', $value);

        if ($negative) {
            $value = '-' . $value;
        }

        /* $value = $this->toDBTimeString($value); */

		return $value;
	}



	public function ___processInput(WireInputData $input) {
		parent::___processInput($input);

		$value = (string) $this->attr('value');
		if (strlen($value)) {

            /**
             * General time string regex - only allows '-', ':' or digits.
             */
			$regex = '#^[\d:-]+$#';
            if (!preg_match($regex, $value)) {
                $this->error($this->_('Only digits and colons (with or without a leading -) are allowed.'));
            }

            /**
             * Apply a regex suitable to our format...
             */
            /* $this->toDBTimeString($value); */
		}

		return $this;
	}


    /* public function getFormats() */
    /* { */
    /*     return array( */
    /*         'HH-24'      => $this->_("Hours (0-24)."), */
    /*         'HH-24-'     => $this->_("Hours (0-24) - can start with a minus"), */
    /*         'HHMM-24'    => $this->_("Hours (0-24) & minutes (00-59)."), */
    /*         'HHMM-24-'   => $this->_("Hours (0-24) & minutes (00-59) - can start with a minus"), */
    /*         'HHMMSS-24'  => $this->_("Hours (0-24), minutes (00-59) & seconds (00-59)."), */
    /*         'HHMMSS-24-' => $this->_("Hours (0-24), minutes (00-59) & seconds (00-59) - can start with a minus"), */
    /*         'HHH'        => $this->_("Hours (0-800)."), */
    /*         'HHH-'       => $this->_("Hours (0-800) - can start with a minus"), */
    /*         'HHHMM'      => $this->_("Hours (0-800) & minutes (00-59)."), */
    /*         'HHHMM-'     => $this->_("Hours (0-800) & minutes (00-59) - can start with a minus"), */
    /*         'HHHMMSS'    => $this->_("Hours (0-800), minutes (00-59) & seconds (00-59)."), */
    /*         'HHHMMSS-'   => $this->_("Hours (0-800), minutes (00-59) & seconds (00-59) - can start with a minus"), */
    /*         'MM'         => $this->_("Minutes (00-59)."), */
    /*         'MM-'        => $this->_("Minutes (00-59) - can start with a minus"), */
    /*         'SS'         => $this->_("Seconds (00-59)."), */
    /*         'SS-'        => $this->_("Seconds (00-59) - can start with a minus"), */
    /*         'MMSS'       => $this->_("Minutes (00-59) & seconds (00-59)."), */
    /*         'MMSS-'      => $this->_("Minutes (00-59) & seconds (00-59) - can start with a minus."), */
    /*     ); */
    /* } */


    public function ___getConfigInputfields()
    {
		$inputfields = parent::___getConfigInputfields();

		/* $f = $this->modules->get('InputfieldCheckbox'); */
		/* $f->attr('name', 'useColons'); */
		/* $f->label = $this->_('Use colons'); */
		/* $f->description = $this->_('When checked, colons can optionally be entered in time fields and will be used when displaying time fields.'); */
		/* $f->attr('value', 1); */
        /* if ($this->useColons) { */
            /* $f->attr('checked', 'checked'); */
        /* } else { */
            /* $f->collapsed = Inputfield::collapsedYes; */
        /* } */
		/* $inputfields->append($f); */

		/* $f = $this->modules->get('InputfieldText'); */
		/* $f->setAttribute('name', 'placeholder'); */
		/* $f->label = $this->_('Placeholder Text'); */
		/* $f->setAttribute('value', $this->attr('placeholder')); */
		/* $f->description = $this->_('Optional placeholder phrase of text that appears in the field when blank.'); */
		/* $f->collapsed = Inputfield::collapsedBlank; */
		/* $inputfields->append($f); */

		/* $f = $this->modules->get('InputfieldInteger'); */
		/* $f->setAttribute('name', 'size'); */
		/* $f->label = $this->_('Size'); */
		/* $f->setAttribute('value', $this->attr('size') > 0 ? $this->attr('size') : 10); */
		/* $f->setAttribute('size', 4); */
		/* $f->description = $this->_('The displayed width of this field (in characters). Set to 0 for full width.'); */
		/* $f->collapsed = Inputfield::collapsedYes; */
		/* $inputfields->append($f); */

		return $inputfields;
	}

}
