<?php declare(strict_types=1);

namespace ProcessWire;

use ProcessWire\Inputfied;
use ProcessWire\FieldtypeTime;

/**
 * An Inputfield for handling time inputs.
 */
class InputfieldTime extends Inputfield
{
    const MYCLASS = 'InputfieldTime';

    public static function getModuleInfo()
    {
        return [
            'name'      => self::MYCLASS,
            'title'     => __('Time'),
            'summary'   => __('Allows entry of times in various formats'),
            'version'   => '1.0.0',
            'permanent' => false,
            'autoload'  => false,
            'singular'  => false,
            'requires'  => [
                'ProcessWire>3.0.33',
                'PHP>=7.2.0',
                'FieldtypeTime',
            ],
            'installs'  => [
                'FieldtypeTime',
            ],
            'author'    => 'Netcarver',
            'href'      => 'https://processwire.com/talk/topic/7857-module-fieldtypetime-inputfieldtime/',
        ];
    }



    public function __construct()
    {
        parent::__construct();
        $this->setAttribute('inhibitClockPicker', 0); // Set to zero if clock picker not wanted
        $this->setAttribute('htmlInput', 0);
    }



    public function init()
    {
        $this->attr('type', 'text');
        $this->attr('size', 10);
        $this->attr('maxlength', 10);
        $this->attr('placeholder', '');
        $this->attr('pattern', '');
        parent::init();
    }



    public function ___renderValue()
    {
        return htmlspecialchars($this->value, ENT_QUOTES, 'UTF-8');
    }



    public function renderReady(Inputfield $parent = null, $renderValueMode = false) {
        $c = $this->config;
        $c->scripts->add($c->urls->InputfieldTime . 'InputfieldTime.trigger.js');
        $r = parent::renderReady($parent, $renderValueMode);
        return $r;
    }



    public function ___render()
    {
        $out = '';
        $format = $this->format;
        $html_compat = in_array($format, ['HH24MM', 'HH24MMSS']);

        if ($this->htmlInput && $html_compat) {
            $this->setAttribute('type', 'time');
            if ($format == 'HH24MMSS') {
                $this->setAttribute('step', 1);
            }
            $theme = $this->wire()->adminTheme->className();
            if ($theme == 'AdminThemeUikit') {
                $this->class('uk-input');
            }
            $attrs = $this->getAttributesString();
            $out = "\n<input $attrs />";
        }
        else if (!$this->getAttribute('inhibitClockPicker') && 'HH24MM' == $format) {
            $id = $this->id;
            $attrs = $this->getAttributesString();
            $out .= "\n<div class=\"input-group clockpicker\" data-autoclose=\"true\">";
            $out .= "\n<input $attrs onclick=\"InputFieldTimePickerTrigger('#$id')\"/>";
            $out .= "\n<span class=\"input-group-addon\">\n\t<span class=\"fa fa-clock-o\"></span>\n</span>";
            $out .= "\n</div>";
        } else {
            $attrs = $this->getAttributesString();
            $out .= "\n<input $attrs />";
        }
        return $out;
    }



    public function getAttributes()
    {
        $attrs = parent::getAttributes();
        if (empty($attrs['size'])) {
            unset($attrs['size']);
            $attrs['class'] = (empty($attrs['class']) ? '' : $attrs['class'] . ' ') . 'InputfieldMaxWidth';
        }
        /* $attrs['placeholder'] = 'PLACEHOLDER'; */
        return $attrs;
    }



    public function setAttribute($key, $value)
    {
        if ($key == 'value') {
            $value = $this->sanitizeValue($value);
        }
        return parent::setAttribute($key, $value);
    }



    protected function sanitizeValue($value)
    {
        $value    = trim($value ?? '');
        $format   = $this->format;
        /* $colons   = $this->useColons; */

        if (!isset($value) || !strlen("$value")) {
            return $value;
        }

        $negative = substr($value, 0, 1) === '-';
        if($negative) {
            $value = substr($value, 1);
        }

        $neg_ok = '-' === substr($format, -1);
        if (!$neg_ok) {
            $negative = false;
        } else {
            $format = substr($format, 0, -1);
        }

        $value = str_replace('-', ':', $value);
        $value = preg_replace('/[^\d:]/', '', $value);

        if ($negative) {
            $value = '-' . $value;
        }

        return $value;
    }



    public function ___processInput(WireInputData $input)
    {
        parent::___processInput($input);

        $value = (string) $this->attr('value');
        if (strlen($value)) {
            /**
             * General time string regex - only allows '-', ':' or digits.
             */
            $regex = '#^[\d:-]+$#';
            if (!preg_match($regex, $value)) {
                $this->error($this->_('Only digits and colons (with or without a leading -) are allowed.'));
            }
        }

        return $this;
    }



    public function ___getConfigInputfields()
    {
        $inputfields = parent::___getConfigInputfields();

        $f = $this->modules->get('InputfieldCheckbox');
        $f->label = $this->_('Inhibit display of clock-picker for HH24MM time fields?');
        $f->attr('name', 'inhibitClockPicker');
        $f->attr('value', 1);
        $f->attr('checked', $this->getAttribute('inhibitClockPicker') ? 'checked' : '');
        $inputfields->append($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->label = $this->_('Use browser native input?');
        $f->attr('name', 'htmlInput');
        $f->attr('value', 1);
        $f->attr('checked', $this->getAttribute('htmlInput') ? 'checked' : '');
        $inputfields->append($f);

        return $inputfields;
    }
}
